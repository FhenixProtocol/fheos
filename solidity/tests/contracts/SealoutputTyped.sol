// This file is auto-generated by solgen/templates/testContracts.ts
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import {FHE, euint8, euint16, euint32, euint64, euint128, euint256, ebool, eaddress, SealedUint, SealedBool, SealedAddress} from "../../FHE.sol";
import {Utils} from "./utils/Utils.sol";

error TestNotFound(string test);

contract SealoutputTypedTest {
    using Utils for *;
    
    function sealoutputTypedBool(string calldata test, bool a, bytes32 pubkey) public pure returns (SealedBool memory) {
        if (Utils.cmp(test, "sealoutputTyped(ebool)")) {
            return FHE.sealoutputTyped(FHE.asEbool(a), pubkey);
        } else if (Utils.cmp(test, "sealTyped(ebool)")) {
            ebool aEnc = FHE.asEbool(a);
            return aEnc.sealTyped(pubkey);
        }
        revert TestNotFound(test);
    }
        
    function sealoutputTypedUint(string calldata test, uint256 a, bytes32 pubkey) public pure returns (SealedUint memory) {
        if (Utils.cmp(test, "sealoutputTyped(euint8)")) {
            return FHE.sealoutputTyped(FHE.asEuint8(a), pubkey);
        } else if (Utils.cmp(test, "sealoutputTyped(euint16)")) {
            return FHE.sealoutputTyped(FHE.asEuint16(a), pubkey);
        } else if (Utils.cmp(test, "sealoutputTyped(euint32)")) {
            return FHE.sealoutputTyped(FHE.asEuint32(a), pubkey);
        } else if (Utils.cmp(test, "sealoutputTyped(euint64)")) {
            return FHE.sealoutputTyped(FHE.asEuint64(a), pubkey);
        } else if (Utils.cmp(test, "sealoutputTyped(euint128)")) {
            return FHE.sealoutputTyped(FHE.asEuint128(a), pubkey);
        } else if (Utils.cmp(test, "sealoutputTyped(euint256)")) {
            return FHE.sealoutputTyped(FHE.asEuint256(a), pubkey);
        } else if (Utils.cmp(test, "sealTyped(euint8)")) {
            euint8 aEnc = FHE.asEuint8(a);
            return aEnc.sealTyped(pubkey);
        }
        revert TestNotFound(test);
    }
        
    function sealoutputTypedAddress(string calldata test, address a, bytes32 pubkey) public pure returns (SealedAddress memory) {
        if (Utils.cmp(test, "sealoutputTyped(eaddress)")) {
            return FHE.sealoutputTyped(FHE.asEaddress(a), pubkey);
        } else if (Utils.cmp(test, "sealTyped(eaddress)")) {
            eaddress aEnc = FHE.asEaddress(a);
            return aEnc.sealTyped(pubkey);
        }
        revert TestNotFound(test);
    }
}
