/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { NonPayableOverrides } from "../../../../common";
import type {
  AsEuint32Test,
  AsEuint32TestInterface,
} from "../../../../tests/contracts/asEuint32.sol/AsEuint32Test";
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "castFromEboolToEuint32",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "castFromEuint16ToEuint32",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "castFromEuint8ToEuint32",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "castFromPlaintextToEuint32",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "val",
        type: "bytes",
      },
    ],
    name: "castFromPreEncryptedToEuint32",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610bbb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063d4b2623111610050578063d4b26231146100cc578063daaafad1146100fc578063e4bc83eb1461012c57610067565b80637ccd14921461006c578063946967191461009c575b600080fd5b61008660048036038101906100819190610656565b61015c565b60405161009391906106a2565b60405180910390f35b6100b660048036038101906100b19190610656565b61017e565b6040516100c391906106a2565b60405180910390f35b6100e660048036038101906100e19190610803565b6101a0565b6040516100f391906106a2565b60405180910390f35b61011660048036038101906101119190610656565b6101ba565b60405161012391906106a2565b60405180910390f35b61014660048036038101906101419190610656565b6101d4565b60405161015391906106a2565b60405180910390f35b600061017761017261016d846101f6565b61020a565b61021e565b9050919050565b600061019961019461018f84610326565b61033a565b61021e565b9050919050565b60006101b36101ae8361034e565b61021e565b9050919050565b60006101cd6101c883610362565b61021e565b9050919050565b60006101ef6101ea6101e584610376565b61038a565b61021e565b9050919050565b600061020382600161039e565b9050919050565b6000610217826002610462565b9050919050565b600061022982610526565b610268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025f906108cf565b60405180910390fd5b600082905060008160001b604051602001610283919061091a565b60405160208183030381529060405290506000608073ffffffffffffffffffffffffffffffffffffffff1663210ca7be836040518263ffffffff1660e01b81526004016102d091906109b4565b602060405180830381865afa1580156102ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031191906109eb565b905061031c81610533565b9350505050919050565b600061033382600061039e565b9050919050565b6000610347826002610462565b9050919050565b600061035b82600261053d565b9050919050565b600061036f82600261039e565b9050919050565b600061038382600061039e565b9050919050565b6000610397826002610462565b9050919050565b6000808360001b8360f81b6040516020016103ba929190610a65565b60405160208183030381529060405290506060608073ffffffffffffffffffffffffffffffffffffffff16638a52c8c7836040518263ffffffff1660e01b815260040161040791906109b4565b600060405180830381865afa158015610424573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061044d9190610b01565b9050610458816105fe565b9250505092915050565b6000808360001b8360f81b60405160200161047e929190610a65565b60405160208183030381529060405290506060608073ffffffffffffffffffffffffffffffffffffffff1663756a210d836040518263ffffffff1660e01b81526004016104cb91906109b4565b600060405180830381865afa1580156104e8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105119190610b01565b905061051c816105fe565b9250505092915050565b6000808214159050919050565b6000819050919050565b600080838360f81b604051602001610556929190610b86565b60405160208183030381529060405290506060608073ffffffffffffffffffffffffffffffffffffffff16638e760afe836040518263ffffffff1660e01b81526004016105a391906109b4565b600060405180830381865afa1580156105c0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105e99190610b01565b90506105f4816105fe565b9250505092915050565b600060208201519050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61063381610620565b811461063e57600080fd5b50565b6000813590506106508161062a565b92915050565b60006020828403121561066c5761066b610616565b5b600061067a84828501610641565b91505092915050565b600063ffffffff82169050919050565b61069c81610683565b82525050565b60006020820190506106b76000830184610693565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610710826106c7565b810181811067ffffffffffffffff8211171561072f5761072e6106d8565b5b80604052505050565b600061074261060c565b905061074e8282610707565b919050565b600067ffffffffffffffff82111561076e5761076d6106d8565b5b610777826106c7565b9050602081019050919050565b82818337600083830152505050565b60006107a66107a184610753565b610738565b9050828152602081018484840111156107c2576107c16106c2565b5b6107cd848285610784565b509392505050565b600082601f8301126107ea576107e96106bd565b5b81356107fa848260208601610793565b91505092915050565b60006020828403121561081957610818610616565b5b600082013567ffffffffffffffff8111156108375761083661061b565b5b610843848285016107d5565b91505092915050565b600082825260208201905092915050565b7f4f6e65206f72206d6f726520696e7075747320617265206e6f7420696e69746960008201527f616c697a65642e00000000000000000000000000000000000000000000000000602082015250565b60006108b960278361084c565b91506108c48261085d565b604082019050919050565b600060208201905081810360008301526108e8816108ac565b9050919050565b6000819050919050565b6000819050919050565b61091461090f826108ef565b6108f9565b82525050565b60006109268284610903565b60208201915081905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561096f578082015181840152602081019050610954565b60008484015250505050565b600061098682610935565b6109908185610940565b93506109a0818560208601610951565b6109a9816106c7565b840191505092915050565b600060208201905081810360008301526109ce818461097b565b905092915050565b6000815190506109e58161062a565b92915050565b600060208284031215610a0157610a00610616565b5b6000610a0f848285016109d6565b91505092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b610a5f610a5a82610a18565b610a44565b82525050565b6000610a718285610903565b602082019150610a818284610a4e565b6001820191508190509392505050565b6000610aa4610a9f84610753565b610738565b905082815260208101848484011115610ac057610abf6106c2565b5b610acb848285610951565b509392505050565b600082601f830112610ae857610ae76106bd565b5b8151610af8848260208601610a91565b91505092915050565b600060208284031215610b1757610b16610616565b5b600082015167ffffffffffffffff811115610b3557610b3461061b565b5b610b4184828501610ad3565b91505092915050565b600081905092915050565b6000610b6082610935565b610b6a8185610b4a565b9350610b7a818560208601610951565b80840191505092915050565b6000610b928285610b55565b9150610b9e8284610a4e565b600182019150819050939250505056fea164736f6c6343000813000a";

type AsEuint32TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AsEuint32TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AsEuint32Test__factory extends ContractFactory {
  constructor(...args: AsEuint32TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AsEuint32Test & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AsEuint32Test__factory {
    return super.connect(runner) as AsEuint32Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AsEuint32TestInterface {
    return new Interface(_abi) as AsEuint32TestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AsEuint32Test {
    return new Contract(address, _abi, runner) as unknown as AsEuint32Test;
  }
}
