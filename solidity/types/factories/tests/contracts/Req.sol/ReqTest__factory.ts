/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { NonPayableOverrides } from "../../../../common";
import type {
  ReqTest,
  ReqTestInterface,
} from "../../../../tests/contracts/Req.sol/ReqTest";
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "test",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
    ],
    name: "req",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ec9806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063befdc5a314610030575b600080fd5b61004a60048036038101906100459190610972565b61004c565b005b6100cf83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506040518060400160405280600b81526020017f726571286575696e743829000000000000000000000000000000000000000000815250610347565b156100ea576100e56100e082610362565b610376565b610342565b61016d83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506040518060400160405280600c81526020017f726571286575696e743136290000000000000000000000000000000000000000815250610347565b156101885761018361017e82610470565b610484565b610341565b61020b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506040518060400160405280600c81526020017f726571286575696e743332290000000000000000000000000000000000000000815250610347565b156102265761022161021c8261057e565b610592565b610340565b6102a983838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506040518060400160405280600a81526020017f7265712865626f6f6c2900000000000000000000000000000000000000000000815250610347565b156102d857600060019050600082036102c157600090505b6102d26102cd8261068c565b6106af565b5061033f565b600083836040516020016102ed929190610aa9565b6040516020818303038152906040529061033d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103349190610b68565b60405180910390fd5b505b5b5b5b505050565b60008180519060200120838051906020012014905092915050565b600061036f8260006107a9565b9050919050565b61037f8161086d565b6103be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b590610bfc565b60405180910390fd5b600081905060008160001b6040516020016103d99190610c47565b6040516020818303038152906040529050608073ffffffffffffffffffffffffffffffffffffffff1663ac6c08dd826040518263ffffffff1660e01b81526004016104249190610cb7565b600060405180830381865afa158015610441573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061046a9190610dfa565b50505050565b600061047d8260016107a9565b9050919050565b61048d8161087a565b6104cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c390610bfc565b60405180910390fd5b600081905060008160001b6040516020016104e79190610c47565b6040516020818303038152906040529050608073ffffffffffffffffffffffffffffffffffffffff1663ac6c08dd826040518263ffffffff1660e01b81526004016105329190610cb7565b600060405180830381865afa15801561054f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105789190610dfa565b50505050565b600061058b8260026107a9565b9050919050565b61059b81610887565b6105da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d190610bfc565b60405180910390fd5b600081905060008160001b6040516020016105f59190610c47565b6040516020818303038152906040529050608073ffffffffffffffffffffffffffffffffffffffff1663ac6c08dd826040518263ffffffff1660e01b81526004016106409190610cb7565b600060405180830381865afa15801561065d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106869190610dfa565b50505050565b60008060009050821561069e57600190505b6106a781610894565b915050919050565b6106b8816108a8565b6106f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ee90610bfc565b60405180910390fd5b600081905060008160001b6040516020016107129190610c47565b6040516020818303038152906040529050608073ffffffffffffffffffffffffffffffffffffffff1663ac6c08dd826040518263ffffffff1660e01b815260040161075d9190610cb7565b600060405180830381865afa15801561077a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107a39190610dfa565b50505050565b6000808360001b8360f81b6040516020016107c5929190610e90565b60405160208183030381529060405290506060608073ffffffffffffffffffffffffffffffffffffffff16638a52c8c7836040518263ffffffff1660e01b81526004016108129190610cb7565b600060405180830381865afa15801561082f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108589190610dfa565b9050610863816108b5565b9250505092915050565b6000808214159050919050565b6000808214159050919050565b6000808214159050919050565b60006108a18260006107a9565b9050919050565b6000808214159050919050565b600060208201519050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126108fc576108fb6108d7565b5b8235905067ffffffffffffffff811115610919576109186108dc565b5b602083019150836001820283011115610935576109346108e1565b5b9250929050565b6000819050919050565b61094f8161093c565b811461095a57600080fd5b50565b60008135905061096c81610946565b92915050565b60008060006040848603121561098b5761098a6108cd565b5b600084013567ffffffffffffffff8111156109a9576109a86108d2565b5b6109b5868287016108e6565b935093505060206109c88682870161095d565b9150509250925092565b600081905092915050565b7f7465737420270000000000000000000000000000000000000000000000000000600082015250565b6000610a136006836109d2565b9150610a1e826109dd565b600682019050919050565b82818337600083830152505050565b6000610a4483856109d2565b9350610a51838584610a29565b82840190509392505050565b7f27206e6f7420666f756e64000000000000000000000000000000000000000000600082015250565b6000610a93600b836109d2565b9150610a9e82610a5d565b600b82019050919050565b6000610ab482610a06565b9150610ac1828486610a38565b9150610acc82610a86565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b12578082015181840152602081019050610af7565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b3a82610ad8565b610b448185610ae3565b9350610b54818560208601610af4565b610b5d81610b1e565b840191505092915050565b60006020820190508181036000830152610b828184610b2f565b905092915050565b7f4f6e65206f72206d6f726520696e7075747320617265206e6f7420696e69746960008201527f616c697a65642e00000000000000000000000000000000000000000000000000602082015250565b6000610be6602783610ae3565b9150610bf182610b8a565b604082019050919050565b60006020820190508181036000830152610c1581610bd9565b9050919050565b6000819050919050565b6000819050919050565b610c41610c3c82610c1c565b610c26565b82525050565b6000610c538284610c30565b60208201915081905092915050565b600081519050919050565b600082825260208201905092915050565b6000610c8982610c62565b610c938185610c6d565b9350610ca3818560208601610af4565b610cac81610b1e565b840191505092915050565b60006020820190508181036000830152610cd18184610c7e565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d1682610b1e565b810181811067ffffffffffffffff82111715610d3557610d34610cde565b5b80604052505050565b6000610d486108c3565b9050610d548282610d0d565b919050565b600067ffffffffffffffff821115610d7457610d73610cde565b5b610d7d82610b1e565b9050602081019050919050565b6000610d9d610d9884610d59565b610d3e565b905082815260208101848484011115610db957610db8610cd9565b5b610dc4848285610af4565b509392505050565b600082601f830112610de157610de06108d7565b5b8151610df1848260208601610d8a565b91505092915050565b600060208284031215610e1057610e0f6108cd565b5b600082015167ffffffffffffffff811115610e2e57610e2d6108d2565b5b610e3a84828501610dcc565b91505092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b610e8a610e8582610e43565b610e6f565b82525050565b6000610e9c8285610c30565b602082019150610eac8284610e79565b600182019150819050939250505056fea164736f6c6343000813000a";

type ReqTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReqTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReqTest__factory extends ContractFactory {
  constructor(...args: ReqTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ReqTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ReqTest__factory {
    return super.connect(runner) as ReqTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReqTestInterface {
    return new Interface(_abi) as ReqTestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ReqTest {
    return new Contract(address, _abi, runner) as unknown as ReqTest;
  }
}
