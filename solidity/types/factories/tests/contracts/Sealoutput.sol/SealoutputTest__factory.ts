/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  SealoutputTest,
  SealoutputTestInterface,
} from "../../../../tests/contracts/Sealoutput.sol/SealoutputTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "test",
        type: "string",
      },
    ],
    name: "TestNotFound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "test",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "pubkey",
        type: "bytes32",
      },
    ],
    name: "sealoutput",
    outputs: [
      {
        internalType: "bytes",
        name: "reencrypted",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b36806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635fd8dc6214610030575b600080fd5b61004a60048036038101906100459190610733565b610060565b6040516100579190610837565b60405180910390f35b60606100e585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506040518060400160405280601281526020017f7365616c6f7574707574286575696e7438290000000000000000000000000000815250610341565b15610103576100fc6100f68461035c565b83610370565b9050610339565b61018685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506040518060400160405280601381526020017f7365616c6f7574707574286575696e7431362900000000000000000000000000815250610341565b156101a45761019d6101978461038a565b8361039e565b9050610339565b61022785858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506040518060400160405280601381526020017f7365616c6f7574707574286575696e7433322900000000000000000000000000815250610341565b156102455761023e610238846103b8565b836103cc565b9050610339565b6102c885858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506040518060400160405280601181526020017f7365616c6f75747075742865626f6f6c29000000000000000000000000000000815250610341565b156102fa57600060019050600084036102e057600090505b6102f26102ec826103e6565b84610409565b915050610339565b84846040517f58197bae0000000000000000000000000000000000000000000000000000000081526004016103309291906108a6565b60405180910390fd5b949350505050565b60008180519060200120838051906020012014905092915050565b6000610369826000610423565b9050919050565b6060600083905061038181846104e7565b91505092915050565b6000610397826001610423565b9050919050565b606060008390506103af81846104e7565b91505092915050565b60006103c5826002610423565b9050919050565b606060008390506103dd81846104e7565b91505092915050565b6000806000905082156103f857600190505b6104018161060a565b915050919050565b6060600083905061041a81846104e7565b91505092915050565b6000808360001b8360f81b60405160200161043f929190610938565b60405160208183030381529060405290506060608073ffffffffffffffffffffffffffffffffffffffff16638a52c8c7836040518263ffffffff1660e01b815260040161048c9190610837565b600060405180830381865afa1580156104a9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104d29190610a85565b90506104dd8161061e565b9250505092915050565b60606104f161062c565b8360001b8160006002811061050957610508610ace565b5b602002018181525050828160016002811061052757610526610ace565b5b602002018181525050608073ffffffffffffffffffffffffffffffffffffffff1663ede86e148260006002811061056157610560610ace565b5b60200201518360016002811061057a57610579610ace565b5b6020020151604051602001610590929190610afd565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016105bb9190610837565b600060405180830381865afa1580156105d8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106019190610a85565b91505092915050565b6000610617826000610423565b9050919050565b600060208201519050919050565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261068757610686610662565b5b8235905067ffffffffffffffff8111156106a4576106a3610667565b5b6020830191508360018202830111156106c0576106bf61066c565b5b9250929050565b6000819050919050565b6106da816106c7565b81146106e557600080fd5b50565b6000813590506106f7816106d1565b92915050565b6000819050919050565b610710816106fd565b811461071b57600080fd5b50565b60008135905061072d81610707565b92915050565b6000806000806060858703121561074d5761074c610658565b5b600085013567ffffffffffffffff81111561076b5761076a61065d565b5b61077787828801610671565b9450945050602061078a878288016106e8565b925050604061079b8782880161071e565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b838110156107e15780820151818401526020810190506107c6565b60008484015250505050565b6000601f19601f8301169050919050565b6000610809826107a7565b61081381856107b2565b93506108238185602086016107c3565b61082c816107ed565b840191505092915050565b6000602082019050818103600083015261085181846107fe565b905092915050565b600082825260208201905092915050565b82818337600083830152505050565b60006108858385610859565b935061089283858461086a565b61089b836107ed565b840190509392505050565b600060208201905081810360008301526108c1818486610879565b90509392505050565b6000819050919050565b6108e56108e0826106fd565b6108ca565b82525050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b61093261092d826108eb565b610917565b82525050565b600061094482856108d4565b6020820191506109548284610921565b6001820191508190509392505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109a1826107ed565b810181811067ffffffffffffffff821117156109c0576109bf610969565b5b80604052505050565b60006109d361064e565b90506109df8282610998565b919050565b600067ffffffffffffffff8211156109ff576109fe610969565b5b610a08826107ed565b9050602081019050919050565b6000610a28610a23846109e4565b6109c9565b905082815260208101848484011115610a4457610a43610964565b5b610a4f8482856107c3565b509392505050565b600082601f830112610a6c57610a6b610662565b5b8151610a7c848260208601610a15565b91505092915050565b600060208284031215610a9b57610a9a610658565b5b600082015167ffffffffffffffff811115610ab957610ab861065d565b5b610ac584828501610a57565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610b0982856108d4565b602082019150610b1982846108d4565b602082019150819050939250505056fea164736f6c6343000813000a";

type SealoutputTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SealoutputTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SealoutputTest__factory extends ContractFactory {
  constructor(...args: SealoutputTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SealoutputTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SealoutputTest__factory {
    return super.connect(runner) as SealoutputTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SealoutputTestInterface {
    return new Interface(_abi) as SealoutputTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SealoutputTest {
    return new Contract(address, _abi, runner) as unknown as SealoutputTest;
  }
}
