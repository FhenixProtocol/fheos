/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { NonPayableOverrides } from "../../../../common";
import type {
  AsEuint8Test,
  AsEuint8TestInterface,
} from "../../../../tests/contracts/asEuint8.sol/AsEuint8Test";
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "castFromEboolToEuint8",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "castFromEuint16ToEuint8",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "castFromEuint32ToEuint8",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "castFromPlaintextToEuint8",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "val",
        type: "bytes",
      },
    ],
    name: "castFromPreEncryptedToEuint8",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610bb8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80639a49ae34116100505780639a49ae34146100cc5780639b041eb7146100fc578063c485941f1461012c57610067565b806350a98bf31461006c5780636116584e1461009c575b600080fd5b61008660048036038101906100819190610656565b61015c565b604051610093919061069f565b60405180910390f35b6100b660048036038101906100b19190610656565b61017e565b6040516100c3919061069f565b60405180910390f35b6100e660048036038101906100e19190610800565b6101a0565b6040516100f3919061069f565b60405180910390f35b61011660048036038101906101119190610656565b6101ba565b604051610123919061069f565b60405180910390f35b61014660048036038101906101419190610656565b6101dc565b604051610153919061069f565b60405180910390f35b600061017761017261016d846101f6565b61020a565b61021e565b9050919050565b600061019961019461018f84610326565b61033a565b61021e565b9050919050565b60006101b36101ae8361034e565b61021e565b9050919050565b60006101d56101d06101cb84610362565b610376565b61021e565b9050919050565b60006101ef6101ea8361038a565b61021e565b9050919050565b600061020382600061039e565b9050919050565b6000610217826000610462565b9050919050565b600061022982610526565b610268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025f906108cc565b60405180910390fd5b600082905060008160001b6040516020016102839190610917565b60405160208183030381529060405290506000608073ffffffffffffffffffffffffffffffffffffffff1663210ca7be836040518263ffffffff1660e01b81526004016102d091906109b1565b602060405180830381865afa1580156102ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031191906109e8565b905061031c81610533565b9350505050919050565b600061033382600161039e565b9050919050565b6000610347826000610462565b9050919050565b600061035b82600061053d565b9050919050565b600061036f82600261039e565b9050919050565b6000610383826000610462565b9050919050565b600061039782600061039e565b9050919050565b6000808360001b8360f81b6040516020016103ba929190610a62565b60405160208183030381529060405290506060608073ffffffffffffffffffffffffffffffffffffffff16638a52c8c7836040518263ffffffff1660e01b815260040161040791906109b1565b600060405180830381865afa158015610424573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061044d9190610afe565b9050610458816105fe565b9250505092915050565b6000808360001b8360f81b60405160200161047e929190610a62565b60405160208183030381529060405290506060608073ffffffffffffffffffffffffffffffffffffffff1663756a210d836040518263ffffffff1660e01b81526004016104cb91906109b1565b600060405180830381865afa1580156104e8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105119190610afe565b905061051c816105fe565b9250505092915050565b6000808214159050919050565b6000819050919050565b600080838360f81b604051602001610556929190610b83565b60405160208183030381529060405290506060608073ffffffffffffffffffffffffffffffffffffffff16638e760afe836040518263ffffffff1660e01b81526004016105a391906109b1565b600060405180830381865afa1580156105c0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105e99190610afe565b90506105f4816105fe565b9250505092915050565b600060208201519050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61063381610620565b811461063e57600080fd5b50565b6000813590506106508161062a565b92915050565b60006020828403121561066c5761066b610616565b5b600061067a84828501610641565b91505092915050565b600060ff82169050919050565b61069981610683565b82525050565b60006020820190506106b46000830184610690565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61070d826106c4565b810181811067ffffffffffffffff8211171561072c5761072b6106d5565b5b80604052505050565b600061073f61060c565b905061074b8282610704565b919050565b600067ffffffffffffffff82111561076b5761076a6106d5565b5b610774826106c4565b9050602081019050919050565b82818337600083830152505050565b60006107a361079e84610750565b610735565b9050828152602081018484840111156107bf576107be6106bf565b5b6107ca848285610781565b509392505050565b600082601f8301126107e7576107e66106ba565b5b81356107f7848260208601610790565b91505092915050565b60006020828403121561081657610815610616565b5b600082013567ffffffffffffffff8111156108345761083361061b565b5b610840848285016107d2565b91505092915050565b600082825260208201905092915050565b7f4f6e65206f72206d6f726520696e7075747320617265206e6f7420696e69746960008201527f616c697a65642e00000000000000000000000000000000000000000000000000602082015250565b60006108b6602783610849565b91506108c18261085a565b604082019050919050565b600060208201905081810360008301526108e5816108a9565b9050919050565b6000819050919050565b6000819050919050565b61091161090c826108ec565b6108f6565b82525050565b60006109238284610900565b60208201915081905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561096c578082015181840152602081019050610951565b60008484015250505050565b600061098382610932565b61098d818561093d565b935061099d81856020860161094e565b6109a6816106c4565b840191505092915050565b600060208201905081810360008301526109cb8184610978565b905092915050565b6000815190506109e28161062a565b92915050565b6000602082840312156109fe576109fd610616565b5b6000610a0c848285016109d3565b91505092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b610a5c610a5782610a15565b610a41565b82525050565b6000610a6e8285610900565b602082019150610a7e8284610a4b565b6001820191508190509392505050565b6000610aa1610a9c84610750565b610735565b905082815260208101848484011115610abd57610abc6106bf565b5b610ac884828561094e565b509392505050565b600082601f830112610ae557610ae46106ba565b5b8151610af5848260208601610a8e565b91505092915050565b600060208284031215610b1457610b13610616565b5b600082015167ffffffffffffffff811115610b3257610b3161061b565b5b610b3e84828501610ad0565b91505092915050565b600081905092915050565b6000610b5d82610932565b610b678185610b47565b9350610b7781856020860161094e565b80840191505092915050565b6000610b8f8285610b52565b9150610b9b8284610a4b565b600182019150819050939250505056fea164736f6c6343000813000a";

type AsEuint8TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AsEuint8TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AsEuint8Test__factory extends ContractFactory {
  constructor(...args: AsEuint8TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AsEuint8Test & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AsEuint8Test__factory {
    return super.connect(runner) as AsEuint8Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AsEuint8TestInterface {
    return new Interface(_abi) as AsEuint8TestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AsEuint8Test {
    return new Contract(address, _abi, runner) as unknown as AsEuint8Test;
  }
}
