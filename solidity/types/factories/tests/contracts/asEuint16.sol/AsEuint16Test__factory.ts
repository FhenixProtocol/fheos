/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { NonPayableOverrides } from "../../../../common";
import type {
  AsEuint16Test,
  AsEuint16TestInterface,
} from "../../../../tests/contracts/asEuint16.sol/AsEuint16Test";
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "castFromEboolToEuint16",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "castFromEuint32ToEuint16",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "castFromEuint8ToEuint16",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "castFromPlaintextToEuint16",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "val",
        type: "bytes",
      },
    ],
    name: "castFromPreEncryptedToEuint16",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610bb9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80632d10e4d7116100505780632d10e4d7146100cc5780635bea2c1a146100fc57806373d51bf51461012c57610067565b80630dbcb7311461006c57806313d2956a1461009c575b600080fd5b61008660048036038101906100819190610766565b61015c565b60405161009391906107cc565b60405180910390f35b6100b660048036038101906100b1919061081d565b610176565b6040516100c391906107cc565b60405180910390f35b6100e660048036038101906100e1919061081d565b610198565b6040516100f391906107cc565b60405180910390f35b6101166004803603810190610111919061081d565b6101ba565b60405161012391906107cc565b60405180910390f35b6101466004803603810190610141919061081d565b6101dc565b60405161015391906107cc565b60405180910390f35b600061016f61016a836101f6565b61020a565b9050919050565b600061019161018c61018784610312565b610326565b61020a565b9050919050565b60006101b36101ae6101a98461033a565b61034e565b61020a565b9050919050565b60006101d56101d06101cb84610362565b610376565b61020a565b9050919050565b60006101ef6101ea8361038a565b61020a565b9050919050565b600061020382600161039e565b9050919050565b60006102158261045f565b610254576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024b906108cd565b60405180910390fd5b600082905060008160001b60405160200161026f9190610918565b60405160208183030381529060405290506000608073ffffffffffffffffffffffffffffffffffffffff1663210ca7be836040518263ffffffff1660e01b81526004016102bc91906109b2565b602060405180830381865afa1580156102d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fd91906109e9565b90506103088161046c565b9350505050919050565b600061031f826002610476565b9050919050565b600061033382600161053a565b9050919050565b6000610347826000610476565b9050919050565b600061035b82600161053a565b9050919050565b600061036f826000610476565b9050919050565b600061038382600161053a565b9050919050565b6000610397826001610476565b9050919050565b600080838360f81b6040516020016103b7929190610a9f565b60405160208183030381529060405290506060608073ffffffffffffffffffffffffffffffffffffffff16638e760afe836040518263ffffffff1660e01b815260040161040491906109b2565b600060405180830381865afa158015610421573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061044a9190610b37565b9050610455816105fe565b9250505092915050565b6000808214159050919050565b6000819050919050565b6000808360001b8360f81b604051602001610492929190610b80565b60405160208183030381529060405290506060608073ffffffffffffffffffffffffffffffffffffffff16638a52c8c7836040518263ffffffff1660e01b81526004016104df91906109b2565b600060405180830381865afa1580156104fc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105259190610b37565b9050610530816105fe565b9250505092915050565b6000808360001b8360f81b604051602001610556929190610b80565b60405160208183030381529060405290506060608073ffffffffffffffffffffffffffffffffffffffff1663756a210d836040518263ffffffff1660e01b81526004016105a391906109b2565b600060405180830381865afa1580156105c0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105e99190610b37565b90506105f4816105fe565b9250505092915050565b600060208201519050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6106738261062a565b810181811067ffffffffffffffff821117156106925761069161063b565b5b80604052505050565b60006106a561060c565b90506106b1828261066a565b919050565b600067ffffffffffffffff8211156106d1576106d061063b565b5b6106da8261062a565b9050602081019050919050565b82818337600083830152505050565b6000610709610704846106b6565b61069b565b90508281526020810184848401111561072557610724610625565b5b6107308482856106e7565b509392505050565b600082601f83011261074d5761074c610620565b5b813561075d8482602086016106f6565b91505092915050565b60006020828403121561077c5761077b610616565b5b600082013567ffffffffffffffff81111561079a5761079961061b565b5b6107a684828501610738565b91505092915050565b600061ffff82169050919050565b6107c6816107af565b82525050565b60006020820190506107e160008301846107bd565b92915050565b6000819050919050565b6107fa816107e7565b811461080557600080fd5b50565b600081359050610817816107f1565b92915050565b60006020828403121561083357610832610616565b5b600061084184828501610808565b91505092915050565b600082825260208201905092915050565b7f4f6e65206f72206d6f726520696e7075747320617265206e6f7420696e69746960008201527f616c697a65642e00000000000000000000000000000000000000000000000000602082015250565b60006108b760278361084a565b91506108c28261085b565b604082019050919050565b600060208201905081810360008301526108e6816108aa565b9050919050565b6000819050919050565b6000819050919050565b61091261090d826108ed565b6108f7565b82525050565b60006109248284610901565b60208201915081905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561096d578082015181840152602081019050610952565b60008484015250505050565b600061098482610933565b61098e818561093e565b935061099e81856020860161094f565b6109a78161062a565b840191505092915050565b600060208201905081810360008301526109cc8184610979565b905092915050565b6000815190506109e3816107f1565b92915050565b6000602082840312156109ff576109fe610616565b5b6000610a0d848285016109d4565b91505092915050565b600081905092915050565b6000610a2c82610933565b610a368185610a16565b9350610a4681856020860161094f565b80840191505092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b610a99610a9482610a52565b610a7e565b82525050565b6000610aab8285610a21565b9150610ab78284610a88565b6001820191508190509392505050565b6000610ada610ad5846106b6565b61069b565b905082815260208101848484011115610af657610af5610625565b5b610b0184828561094f565b509392505050565b600082601f830112610b1e57610b1d610620565b5b8151610b2e848260208601610ac7565b91505092915050565b600060208284031215610b4d57610b4c610616565b5b600082015167ffffffffffffffff811115610b6b57610b6a61061b565b5b610b7784828501610b09565b91505092915050565b6000610b8c8285610901565b602082019150610b9c8284610a88565b600182019150819050939250505056fea164736f6c6343000813000a";

type AsEuint16TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AsEuint16TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AsEuint16Test__factory extends ContractFactory {
  constructor(...args: AsEuint16TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AsEuint16Test & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AsEuint16Test__factory {
    return super.connect(runner) as AsEuint16Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AsEuint16TestInterface {
    return new Interface(_abi) as AsEuint16TestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AsEuint16Test {
    return new Contract(address, _abi, runner) as unknown as AsEuint16Test;
  }
}
