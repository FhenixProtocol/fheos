/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "FHE",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FHE__factory>;
    getContractFactory(
      name: "FheOps",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FheOps__factory>;
    getContractFactory(
      name: "Precompiles",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Precompiles__factory>;
    getContractFactory(
      name: "AddTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddTest__factory>;
    getContractFactory(
      name: "AndTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AndTest__factory>;
    getContractFactory(
      name: "AsEboolTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AsEboolTest__factory>;
    getContractFactory(
      name: "AsEuint16Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AsEuint16Test__factory>;
    getContractFactory(
      name: "AsEuint32Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AsEuint32Test__factory>;
    getContractFactory(
      name: "AsEuint8Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AsEuint8Test__factory>;
    getContractFactory(
      name: "DivTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DivTest__factory>;
    getContractFactory(
      name: "EqTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EqTest__factory>;
    getContractFactory(
      name: "GtTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GtTest__factory>;
    getContractFactory(
      name: "GteTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GteTest__factory>;
    getContractFactory(
      name: "LtTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LtTest__factory>;
    getContractFactory(
      name: "LteTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LteTest__factory>;
    getContractFactory(
      name: "MaxTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MaxTest__factory>;
    getContractFactory(
      name: "MinTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinTest__factory>;
    getContractFactory(
      name: "MulTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MulTest__factory>;
    getContractFactory(
      name: "NeTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NeTest__factory>;
    getContractFactory(
      name: "NotTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NotTest__factory>;
    getContractFactory(
      name: "OrTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrTest__factory>;
    getContractFactory(
      name: "RemTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RemTest__factory>;
    getContractFactory(
      name: "ReqTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReqTest__factory>;
    getContractFactory(
      name: "SealoutputTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SealoutputTest__factory>;
    getContractFactory(
      name: "SelectTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SelectTest__factory>;
    getContractFactory(
      name: "ShlTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShlTest__factory>;
    getContractFactory(
      name: "ShrTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShrTest__factory>;
    getContractFactory(
      name: "SubTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SubTest__factory>;
    getContractFactory(
      name: "XorTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XorTest__factory>;

    getContractAt(
      name: "FHE",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FHE>;
    getContractAt(
      name: "FheOps",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FheOps>;
    getContractAt(
      name: "Precompiles",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Precompiles>;
    getContractAt(
      name: "AddTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AddTest>;
    getContractAt(
      name: "AndTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AndTest>;
    getContractAt(
      name: "AsEboolTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AsEboolTest>;
    getContractAt(
      name: "AsEuint16Test",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AsEuint16Test>;
    getContractAt(
      name: "AsEuint32Test",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AsEuint32Test>;
    getContractAt(
      name: "AsEuint8Test",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AsEuint8Test>;
    getContractAt(
      name: "DivTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DivTest>;
    getContractAt(
      name: "EqTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EqTest>;
    getContractAt(
      name: "GtTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GtTest>;
    getContractAt(
      name: "GteTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GteTest>;
    getContractAt(
      name: "LtTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LtTest>;
    getContractAt(
      name: "LteTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LteTest>;
    getContractAt(
      name: "MaxTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MaxTest>;
    getContractAt(
      name: "MinTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MinTest>;
    getContractAt(
      name: "MulTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MulTest>;
    getContractAt(
      name: "NeTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NeTest>;
    getContractAt(
      name: "NotTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NotTest>;
    getContractAt(
      name: "OrTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OrTest>;
    getContractAt(
      name: "RemTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RemTest>;
    getContractAt(
      name: "ReqTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReqTest>;
    getContractAt(
      name: "SealoutputTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SealoutputTest>;
    getContractAt(
      name: "SelectTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SelectTest>;
    getContractAt(
      name: "ShlTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ShlTest>;
    getContractAt(
      name: "ShrTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ShrTest>;
    getContractAt(
      name: "SubTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SubTest>;
    getContractAt(
      name: "XorTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.XorTest>;

    deployContract(
      name: "FHE",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FHE>;
    deployContract(
      name: "FheOps",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FheOps>;
    deployContract(
      name: "Precompiles",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Precompiles>;
    deployContract(
      name: "AddTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddTest>;
    deployContract(
      name: "AndTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AndTest>;
    deployContract(
      name: "AsEboolTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AsEboolTest>;
    deployContract(
      name: "AsEuint16Test",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AsEuint16Test>;
    deployContract(
      name: "AsEuint32Test",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AsEuint32Test>;
    deployContract(
      name: "AsEuint8Test",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AsEuint8Test>;
    deployContract(
      name: "DivTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DivTest>;
    deployContract(
      name: "EqTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EqTest>;
    deployContract(
      name: "GtTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GtTest>;
    deployContract(
      name: "GteTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GteTest>;
    deployContract(
      name: "LtTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LtTest>;
    deployContract(
      name: "LteTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LteTest>;
    deployContract(
      name: "MaxTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MaxTest>;
    deployContract(
      name: "MinTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MinTest>;
    deployContract(
      name: "MulTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MulTest>;
    deployContract(
      name: "NeTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NeTest>;
    deployContract(
      name: "NotTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NotTest>;
    deployContract(
      name: "OrTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrTest>;
    deployContract(
      name: "RemTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RemTest>;
    deployContract(
      name: "ReqTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReqTest>;
    deployContract(
      name: "SealoutputTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SealoutputTest>;
    deployContract(
      name: "SelectTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SelectTest>;
    deployContract(
      name: "ShlTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShlTest>;
    deployContract(
      name: "ShrTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShrTest>;
    deployContract(
      name: "SubTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubTest>;
    deployContract(
      name: "XorTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.XorTest>;

    deployContract(
      name: "FHE",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FHE>;
    deployContract(
      name: "FheOps",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FheOps>;
    deployContract(
      name: "Precompiles",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Precompiles>;
    deployContract(
      name: "AddTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddTest>;
    deployContract(
      name: "AndTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AndTest>;
    deployContract(
      name: "AsEboolTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AsEboolTest>;
    deployContract(
      name: "AsEuint16Test",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AsEuint16Test>;
    deployContract(
      name: "AsEuint32Test",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AsEuint32Test>;
    deployContract(
      name: "AsEuint8Test",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AsEuint8Test>;
    deployContract(
      name: "DivTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DivTest>;
    deployContract(
      name: "EqTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EqTest>;
    deployContract(
      name: "GtTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GtTest>;
    deployContract(
      name: "GteTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GteTest>;
    deployContract(
      name: "LtTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LtTest>;
    deployContract(
      name: "LteTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LteTest>;
    deployContract(
      name: "MaxTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MaxTest>;
    deployContract(
      name: "MinTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MinTest>;
    deployContract(
      name: "MulTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MulTest>;
    deployContract(
      name: "NeTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NeTest>;
    deployContract(
      name: "NotTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NotTest>;
    deployContract(
      name: "OrTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrTest>;
    deployContract(
      name: "RemTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RemTest>;
    deployContract(
      name: "ReqTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReqTest>;
    deployContract(
      name: "SealoutputTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SealoutputTest>;
    deployContract(
      name: "SelectTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SelectTest>;
    deployContract(
      name: "ShlTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShlTest>;
    deployContract(
      name: "ShrTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShrTest>;
    deployContract(
      name: "SubTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SubTest>;
    deployContract(
      name: "XorTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.XorTest>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
